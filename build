#!/bin/sh
# This script is only used for developement. It is removed by the
# distribution process.

set -e

OCAMLBUILD=${OCAMLBUILD:="ocamlbuild -tag debug -classic-display \
                          -use-ocamlfind \
                          -plugin-tag package(js_of_ocaml.ocamlbuild)"}

action ()
{
    case $1 in
      default)      action backends ;;
      doc)          shift; pkg-doc $* doc/dev-api.docdir ;;
      api-doc)      shift; pkg-doc $* doc/api.docdir ;;
      backends)     $OCAMLBUILD useri_base.cma useri_base.cmxa \
                                useri.cma useri.cmxa \
                                useri_jsoo.cma useri_jsoo.cmxa \
                                useri_tsdl.cma useri_tsdl.cmxa
                    ;;
      tests)        $OCAMLBUILD tests.otarget ;;
      test-tsdl)    action backends
                    shift
                    rm -f $1.native
                    $OCAMLBUILD $1.cmx
                    cd _build
                    ocamlfind ocamlopt -linkpkg -g -package tsdl \
                    -package gg -package react -package lwt.unix -package lwt.react \
                    src/useri_base.cmxa  src/tsdl/useri_tsdl.cmxa \
                    src/useri.cmxa test/test.cmx test/$1.cmx -o test/$1.native
                    ln -s _build/test/$1.native ../$1.native
                    cd ..
                    ;;
      test-app)     action test-tsdl test_tsdl
                    macosx_app Test_tsdl _build/test/test_tsdl.native \
                    "libSDL2 libffi" test/app
                    ;;
      clean)        $OCAMLBUILD -clean ;;
      jsoo)         action backends
                    shift;
                    $OCAMLBUILD $1.cmo $1.html
                    # Work around ocamlbuild link order bug
                    cd _build
                    ocamlfind ocamlc -linkpkg -g \
                     -package js_of_ocaml -package js_of_ocaml.syntax \
                     -syntax camlp4o -package gg -package react \
                     -package vg.htmlc \
                     src/useri_base.cma  src/jsoo/useri_jsoo.cma \
                     src/useri.cma test/test.cmo test/$1.cmo -o test/$1.byte
                    js_of_ocaml +weak.js test/$1.byte
                    cd ..
                    reload-browser "http://`hostname`/useri/test/$1.html"
                    ;;
      *)            $OCAMLBUILD $* ;;
    esac
}

macosx_app ()
{
    BUILDDIR=_build
    APP=$1
    EXE=$2
    DYLIBS=$3
    RESDIR=$4
    mkdir -p $BUILDDIR/$APP.app/Contents
    mkdir -p $BUILDDIR/$APP.app/Contents/MacOS
    mkdir -p $BUILDDIR/$APP.app/Contents/Frameworks
    mkdir -p $BUILDDIR/$APP.app/Contents/Resources

    for f in $RESDIR/* ; do
        if [ "$f" == "$RESDIR/Info.plist" ]; then
            cp $f $BUILDDIR/$APP.app/Contents/
        else
            cp $f $BUILDDIR/$APP.app/Contents/Resources
        fi
    done

    APPEXE="$BUILDDIR/$APP.app/Contents/MacOS/$APP"
    cp $EXE $APPEXE

    for libname in $DYLIBS; do
        ID=`otool -L $APPEXE | grep -o "/.*$libname.*.dylib"`
        NEWID="@loader_path/../Frameworks/`basename $ID`"
        LOC="$BUILDDIR/$APP.app/Contents/Frameworks/`basename $ID`"
        cp $ID $LOC
        chmod u+w $LOC
        install_name_tool -id $NEWID $LOC
        install_name_tool -change $ID $NEWID $APPEXE
    done

    if [ ! -h $APP.app ]; then
        ln -s $BUILDDIR/$APP.app $APP.app
    fi
}


if [ $# -eq 0 ];
then action default ;
else action $*; fi
